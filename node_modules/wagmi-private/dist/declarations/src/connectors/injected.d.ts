import { Chain } from '../types';
import { Connector } from './base';
export declare class InjectedConnector extends Connector<Window['ethereum'], undefined> {
    readonly id = "injected";
    readonly name: string;
    readonly ready: boolean;
    private _provider?;
    constructor(config?: {
        chains?: Chain[];
    });
    connect(): Promise<{
        account: string;
        chain: {
            id: number;
            unsupported: boolean;
        };
        provider: {
            isCoinbaseWallet?: true | undefined;
            isMetaMask?: true | undefined;
            on?: ((...args: any[]) => void) | undefined;
            removeListener?: ((...args: any[]) => void) | undefined;
            request<T = any>(args: RequestArguments): Promise<T>;
        };
    }>;
    disconnect(): Promise<void>;
    getAccount(): Promise<string>;
    getChainId(): Promise<number>;
    getProvider(): {
        isCoinbaseWallet?: true | undefined;
        isMetaMask?: true | undefined;
        on?: ((...args: any[]) => void) | undefined;
        removeListener?: ((...args: any[]) => void) | undefined;
        request<T = any>(args: RequestArguments): Promise<T>;
    } | undefined;
    getSigner(): Promise<import("@ethersproject/providers").JsonRpcSigner>;
    isAuthorized(): Promise<boolean>;
    switchChain(chainId: number): Promise<void>;
    watchAsset({ address, decimals, image, symbol, }: {
        address: string;
        decimals?: number;
        image?: string;
        symbol: string;
    }): Promise<void>;
    protected onAccountsChanged: (accounts: string[]) => void;
    protected onChainChanged: (chainId: number | string) => void;
    protected onDisconnect: () => void;
}
