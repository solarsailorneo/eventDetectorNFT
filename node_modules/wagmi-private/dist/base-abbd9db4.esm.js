import EventEmitter from 'eventemitter3';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var normalizeChainId = chainId => {
  if (typeof chainId === 'string') return Number.parseInt(chainId, chainId.trim().substring(0, 2) === '0x' ? 16 : 10);
  return chainId;
};

class AddChainError extends Error {
  constructor() {
    super(...arguments);

    _defineProperty(this, "name", 'AddChainError');

    _defineProperty(this, "message", 'Error adding chain');
  }

}
class ChainNotConfiguredError extends Error {
  constructor() {
    super(...arguments);

    _defineProperty(this, "name", 'ChainNotConfigured');

    _defineProperty(this, "message", 'Chain not configured');
  }

}
class ConnectorNotFoundError extends Error {
  constructor() {
    super(...arguments);

    _defineProperty(this, "name", 'ConnectorNotFoundError');

    _defineProperty(this, "message", 'Connector not found');
  }

}
class SwitchChainError extends Error {
  constructor() {
    super(...arguments);

    _defineProperty(this, "name", 'SwitchChainError');

    _defineProperty(this, "message", 'Error switching chain');
  }

}
class UserRejectedRequestError extends Error {
  constructor() {
    super(...arguments);

    _defineProperty(this, "name", 'UserRejectedRequestError');

    _defineProperty(this, "message", 'User rejected request');
  }

}

var chain = {
  mainnet: {
    id: 1,
    name: 'Mainnet',
    nativeCurrency: {
      name: 'Ether',
      symbol: 'ETH',
      decimals: 18
    },
    rpcUrls: ['https://mainnet.infura.io/v3'],
    blockExplorers: [{
      name: 'Etherscan',
      url: 'https://etherscan.io'
    }]
  },
  ropsten: {
    id: 3,
    name: 'Ropsten',
    nativeCurrency: {
      name: 'Ropsten Ether',
      symbol: 'ropETH',
      decimals: 18
    },
    rpcUrls: ['https://ropsten.infura.io/v3'],
    blockExplorers: [{
      name: 'Etherscan',
      url: 'https://ropsten.etherscan.io'
    }],
    testnet: true
  },
  rinkeby: {
    id: 4,
    name: 'Rinkeby',
    nativeCurrency: {
      name: 'Rinkeby Ether',
      symbol: 'rETH',
      decimals: 18
    },
    rpcUrls: ['https://rinkeby.infura.io/v3'],
    blockExplorers: [{
      name: 'Etherscan',
      url: 'https://rinkeby.etherscan.io'
    }],
    testnet: true
  },
  goerli: {
    id: 5,
    name: 'Goerli',
    nativeCurrency: {
      name: 'Goerli Ether',
      symbol: 'gETH',
      decimals: 18
    },
    rpcUrls: ['https://rinkeby.infura.io/v3'],
    blockExplorers: [{
      name: 'Etherscan',
      url: 'https://rinkeby.etherscan.io'
    }],
    testnet: true
  },
  kovan: {
    id: 42,
    name: 'Kovan',
    nativeCurrency: {
      name: 'Kovan Ether',
      symbol: 'kETH',
      decimals: 18
    },
    rpcUrls: ['https://kovan.infura.io/v3'],
    blockExplorers: [{
      name: 'Etherscan',
      url: 'https://kovan.etherscan.io'
    }],
    testnet: true
  },
  optimisticEthereum: {
    id: 10,
    name: 'Optimistic Ethereum',
    nativeCurrency: {
      name: 'Optimistic Ether',
      symbol: 'OETH',
      decimals: 18
    },
    rpcUrls: ['https://mainnet.optimism.io'],
    blockExplorers: [{
      name: 'Etherscan',
      url: 'https://optimistic.etherscan.io'
    }]
  },
  optimisticKovan: {
    id: 69,
    name: 'Optimistic Kovan',
    nativeCurrency: {
      name: 'Kovan Ether',
      symbol: 'KOR',
      decimals: 18
    },
    rpcUrls: ['https://kovan.optimism.io'],
    blockExplorers: [{
      name: 'Etherscan',
      url: 'https://optimistic.etherscan.io'
    }],
    testnet: true
  },
  polygonMainnet: {
    id: 137,
    name: 'Polygon Mainnet',
    nativeCurrency: {
      name: 'Matic',
      symbol: 'MATIC',
      decimals: 18
    },
    rpcUrls: ['https://polygon-rpc.com', 'https://rpc-mainnet.matic.network', 'https://matic-mainnet.chainstacklabs.com', 'https://rpc-mainnet.maticvigil.com', 'https://rpc-mainnet.matic.quiknode.pro', 'https://matic-mainnet-full-rpc.bwarelabs.com'],
    blockExplorers: [{
      name: 'Polygonscan',
      url: 'https://polygonscan.com'
    }]
  },
  polygonTestnetMumbai: {
    id: 80001,
    name: 'Polygon Testnet Mumbai',
    nativeCurrency: {
      name: 'Matic',
      symbol: 'MATIC',
      decimals: 18
    },
    rpcUrls: ['https://matic-mumbai.chainstacklabs.com', 'https://rpc-mumbai.maticvigil.com', 'https://matic-testnet-archive-rpc.bwarelabs.com'],
    blockExplorers: [{
      name: 'Polygonscan',
      url: 'https://mumbai.polygonscan.com'
    }],
    testnet: true
  },
  arbitrumOne: {
    id: 42161,
    name: 'Arbitrum One',
    nativeCurrency: {
      name: 'Ether',
      symbol: 'AETH',
      decimals: 18
    },
    rpcUrls: ['https://arb1.arbitrum.io/rpc'],
    blockExplorers: [{
      name: 'Arbiscan',
      url: 'https://arbiscan.io'
    }, {
      name: 'Arbitrum Explorer',
      url: 'https://explorer.arbitrum.io'
    }]
  },
  arbitrumRinkeby: {
    id: 421611,
    name: 'Rinkeby Arbitrum',
    nativeCurrency: {
      name: 'Rinkeby ArbEther',
      symbol: 'rinkArbETH',
      decimals: 18
    },
    rpcUrls: ['https://rinkeby.arbitrum.io/rpc'],
    blockExplorers: [{
      name: 'Arbitrum Explorer',
      url: 'https://rinkeby-explorer.arbitrum.io'
    }],
    testnet: true
  },
  localhost: {
    id: 1337,
    name: 'Localhost',
    rpcUrls: ['https://127.0.0.1:8545']
  }
};
var defaultChains = [chain.mainnet, chain.ropsten, chain.rinkeby, chain.goerli, chain.kovan];
var defaultL2Chains = [chain.optimisticEthereum, chain.optimisticKovan, chain.polygonMainnet, chain.polygonTestnetMumbai, chain.arbitrumOne, chain.arbitrumRinkeby];
var developmentChains = [chain.localhost];

class Connector extends EventEmitter {
  /** Unique connector id */

  /** Connector name */

  /** Chains connector supports */

  /** Options to use with connector */

  /** Whether connector is usable */
  constructor(_ref) {
    var {
      chains = defaultChains,
      options
    } = _ref;
    super();

    _defineProperty(this, "id", void 0);

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "chains", void 0);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "ready", void 0);

    this.chains = chains;
    this.options = options;
  }

  isChainUnsupported(chainId) {
    return !this.chains.some(x => x.id === chainId);
  }

}

export { AddChainError as A, Connector as C, SwitchChainError as S, UserRejectedRequestError as U, _defineProperty as _, _asyncToGenerator as a, ConnectorNotFoundError as b, ChainNotConfiguredError as c, chain as d, defaultChains as e, defaultL2Chains as f, developmentChains as g, normalizeChainId as n };
