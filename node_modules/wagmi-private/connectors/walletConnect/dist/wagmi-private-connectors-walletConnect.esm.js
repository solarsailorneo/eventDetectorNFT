import { C as Connector, _ as _defineProperty, n as normalizeChainId, a as _asyncToGenerator, U as UserRejectedRequestError } from '../../../dist/base-abbd9db4.esm.js';
import { Web3Provider } from '@ethersproject/providers';
import WalletConnectProvider from '@walletconnect/ethereum-provider';
import { getAddress } from 'ethers/lib/utils';
import 'eventemitter3';

class WalletConnectConnector extends Connector {
  constructor(config) {
    super(config);

    _defineProperty(this, "id", 'walletConnect');

    _defineProperty(this, "name", 'WalletConnect');

    _defineProperty(this, "ready", true);

    _defineProperty(this, "_provider", void 0);

    _defineProperty(this, "onAccountsChanged", accounts => {
      if (accounts.length === 0) this.emit('disconnect');else this.emit('change', {
        account: accounts[0]
      });
    });

    _defineProperty(this, "onChainChanged", chainId => {
      var id = normalizeChainId(chainId);
      var unsupported = this.isChainUnsupported(id);
      this.emit('change', {
        chain: {
          id,
          unsupported
        }
      });
    });

    _defineProperty(this, "onDisconnect", () => {
      this.emit('disconnect');
    });
  }

  connect() {
    var _this = this;

    return _asyncToGenerator(function* () {
      try {
        var provider = _this.getProvider(true);

        provider.on('accountsChanged', _this.onAccountsChanged);
        provider.on('chainChanged', _this.onChainChanged);
        provider.on('disconnect', _this.onDisconnect);
        var accounts = yield provider.enable();
        var account = getAddress(accounts[0]);
        var id = yield _this.getChainId();

        var unsupported = _this.isChainUnsupported(id);

        return {
          account,
          chain: {
            id,
            unsupported
          },
          provider: new Web3Provider(provider)
        };
      } catch (error) {
        if (error.message === 'User closed modal') throw new UserRejectedRequestError();
        throw error;
      }
    })();
  }

  disconnect() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      var provider = _this2.getProvider();

      yield provider.disconnect();
      provider.removeListener('accountsChanged', _this2.onAccountsChanged);
      provider.removeListener('chainChanged', _this2.onChainChanged);
      provider.removeListener('disconnect', _this2.onDisconnect);
      typeof localStorage !== 'undefined' && localStorage.removeItem('walletconnect');
    })();
  }

  getAccount() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      var provider = _this3.getProvider();

      var accounts = provider.accounts; // return checksum address

      return getAddress(accounts[0]);
    })();
  }

  getChainId() {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      var provider = _this4.getProvider();

      var chainId = normalizeChainId(provider.chainId);
      return chainId;
    })();
  }

  getProvider(create) {
    if (!this._provider || create) this._provider = new WalletConnectProvider(this.options);
    return this._provider;
  }

  getSigner() {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      var provider = _this5.getProvider();

      var account = yield _this5.getAccount();
      return new Web3Provider(provider).getSigner(account);
    })();
  }

  isAuthorized() {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      try {
        var account = yield _this6.getAccount();
        return !!account;
      } catch (_unused) {
        return false;
      }
    })();
  }

}

export { WalletConnectConnector };
